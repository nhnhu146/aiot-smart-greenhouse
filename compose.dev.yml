services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: aiot_greenhouse_db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-greenhouse_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-greenhouse_password}
      MONGO_INITDB_DATABASE: aiot_greenhouse
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Backend API
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: aiot_greenhouse_backend
  #   restart: unless-stopped
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #   environment:
  #     
  #     PORT: 5000
  #     MONGODB_URI: mongodb://${MONGODB_USER:-greenhouse_user}:${MONGODB_PASSWORD:-greenhouse_password}@mongodb:27017/aiot_greenhouse?authSource=admin
  #     MQTT_BROKER_URL: mqtt://mqtt.noboroto.id.vn:1883
  #     MQTT_USERNAME: ${MQTT_USERNAME:-vision}
  #     MQTT_PASSWORD: ${MQTT_PASSWORD:-vision}
  #     MQTT_CLIENT_ID: greenhouse_backend
  #     API_PREFIX: /api
  #     CORS_ORIGIN: http://localhost:3000
  #     RATE_LIMIT_WINDOW_MS: 900000
  #     RATE_LIMIT_MAX_REQUESTS: 100
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - ./backend/logs:/app/logs
  #   networks:
  #     - greenhouse_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # Frontend (Next.js) - Commented out for development
  # Uncomment this section if you want to build and run frontend in Docker
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: aiot_greenhouse_frontend
  #   restart: unless-stopped
  #   depends_on:
  #     backend:
  #       condition: service_healthy
  #   environment:
  #     
  #     NEXT_PUBLIC_API_URL: http://localhost:5000
  #     NEXT_PUBLIC_MQTT_URL: mqtt://mqtt.noboroto.id.vn:1883
  #     NEXT_PUBLIC_MQTT_USERNAME: ${MQTT_USERNAME:-vision}
  #     NEXT_PUBLIC_MQTT_PASSWORD: ${MQTT_PASSWORD:-vision}
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - greenhouse_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:3000"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # Redis (for caching and session storage)
  redis:
    image: redis:7.2-alpine
    container_name: aiot_greenhouse_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - greenhouse_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  greenhouse_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
