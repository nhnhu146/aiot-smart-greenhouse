'use client';

import React, { useState } from 'react';
import { Container, Card, Row, Col, Button, Badge } from 'react-bootstrap';
import styles from './mqtt-examples.module.scss';

// Force dynamic rendering
export const dynamic = 'force-dynamic';

const MqttExamples = () => {
	const [copiedTopic, setCopiedTopic] = useState<string | null>(null);

	const copyToClipboard = (text: string, topicId: string) => {
		navigator.clipboard.writeText(text).then(() => {
			setCopiedTopic(topicId);
			setTimeout(() => setCopiedTopic(null), 2000);
		});
	};

	const sensorTopics = [
		{
			name: "Temperature",
			topic: "greenhouse/sensors/temperature",
			dataType: "Number",
			unit: "¬∞C",
			description: "Nhi·ªát ƒë·ªô m√¥i tr∆∞·ªùng trong nh√† k√≠nh",
			examples: [
				{ description: "Nhi·ªát ƒë·ªô b√¨nh th∆∞·ªùng", value: 25.5 },
				{ description: "Nhi·ªát ƒë·ªô cao", value: 35.0 },
				{ description: "Nhi·ªát ƒë·ªô th·∫•p", value: 15.0 }
			]
		},
		{
			name: "Humidity",
			topic: "greenhouse/sensors/humidity",
			dataType: "Number",
			unit: "%",
			description: "ƒê·ªô ·∫©m kh√¥ng kh√≠ trong nh√† k√≠nh",
			examples: [
				{ description: "ƒê·ªô ·∫©m t·ªëi ∆∞u", value: 65 },
				{ description: "ƒê·ªô ·∫©m cao", value: 85 },
				{ description: "ƒê·ªô ·∫©m th·∫•p", value: 40 }
			]
		},
		{
			name: "Soil Moisture (Binary)",
			topic: "greenhouse/sensors/soil",
			dataType: "Binary",
			unit: "0/1",
			description: "ƒê·ªô ·∫©m ƒë·∫•t (nh·ªã ph√¢n: 0=kh√¥, 1=·∫©m)",
			examples: [
				{ description: "ƒê·∫•t kh√¥ (c·∫ßn t∆∞·ªõi)", value: 0 },
				{ description: "ƒê·∫•t ·∫©m (ƒë·ªß n∆∞·ªõc)", value: 1 }
			]
		},
		{
			name: "Water Level (Binary)",
			topic: "greenhouse/sensors/water",
			dataType: "Binary",
			unit: "0/1",
			description: "M·ª©c n∆∞·ªõc trong b√¨nh ch·ª©a (nh·ªã ph√¢n: 0=b√¨nh th∆∞·ªùng, 1=ng·∫≠p n∆∞·ªõc)",
			examples: [
				{ description: "M·ª©c n∆∞·ªõc b√¨nh th∆∞·ªùng", value: 0 },
				{ description: "Ng·∫≠p n∆∞·ªõc (b√°o ƒë·ªông)", value: 1 }
			]
		},
		{
			name: "Light Level (Binary)",
			topic: "greenhouse/sensors/light",
			dataType: "Binary",
			unit: "0/1",
			description: "C∆∞·ªùng ƒë·ªô √°nh s√°ng m√¥i tr∆∞·ªùng (nh·ªã ph√¢n: 0=t·ªëi, 1=s√°ng)",
			examples: [
				{ description: "T·ªëi (c·∫ßn b·∫≠t ƒë√®n)", value: 0 },
				{ description: "S√°ng (ƒë·ªß √°nh s√°ng)", value: 1 }
			]
		},
		{
			name: "Plant Height",
			topic: "greenhouse/sensors/height",
			dataType: "Number",
			unit: "cm",
			description: "Chi·ªÅu cao c√¢y tr·ªìng (ƒëo b·∫±ng si√™u √¢m)",
			examples: [
				{ description: "C√¢y con", value: 15 },
				{ description: "C√¢y ph√°t tri·ªÉn", value: 45 },
				{ description: "C√¢y tr∆∞·ªüng th√†nh", value: 80 }
			]
		},
		{
			name: "Rain Detection (Binary)",
			topic: "greenhouse/sensors/rain",
			dataType: "Binary",
			unit: "0/1",
			description: "Ph√°t hi·ªán m∆∞a (nh·ªã ph√¢n: 0=kh√¥ng m∆∞a, 1=c√≥ m∆∞a)",
			examples: [
				{ description: "Tr·ªùi kh√¥ r√°o", value: 0 },
				{ description: "ƒêang c√≥ m∆∞a", value: 1 }
			]
		}
	];

	const controlTopics = [
		{
			name: "Light Control",
			topic: "greenhouse/devices/light/control",
			dataType: "String",
			description: "ƒêi·ªÅu khi·ªÉn ƒë√®n LED chi·∫øu s√°ng (ESP32 nh·∫≠n HIGH/LOW)",
			examples: [
				{ description: "B·∫≠t ƒë√®n", value: "HIGH" },
				{ description: "T·∫Øt ƒë√®n", value: "LOW" }
			]
		},
		{
			name: "Pump Control",
			topic: "greenhouse/devices/pump/control",
			dataType: "String",
			description: "ƒêi·ªÅu khi·ªÉn m√°y b∆°m t∆∞·ªõi n∆∞·ªõc (ESP32 nh·∫≠n HIGH/LOW)",
			examples: [
				{ description: "B·∫≠t m√°y b∆°m", value: "HIGH" },
				{ description: "T·∫Øt m√°y b∆°m", value: "LOW" }
			]
		},
		{
			name: "Door Control",
			topic: "greenhouse/devices/door/control",
			dataType: "String",
			description: "ƒêi·ªÅu khi·ªÉn servo motor c·ª≠a ch√≠nh (ESP32 nh·∫≠n HIGH/LOW)",
			examples: [
				{ description: "M·ªü c·ª≠a", value: "HIGH" },
				{ description: "ƒê√≥ng c·ª≠a", value: "LOW" }
			]
		},
		{
			name: "Window Control",
			topic: "greenhouse/devices/window/control",
			dataType: "String",
			description: "ƒêi·ªÅu khi·ªÉn servo motor c·ª≠a s·ªï th√¥ng gi√≥ (ESP32 nh·∫≠n HIGH/LOW)",
			examples: [
				{ description: "M·ªü c·ª≠a s·ªï", value: "HIGH" },
				{ description: "ƒê√≥ng c·ª≠a s·ªï", value: "LOW" }
			]
		}
	];

	const getValueForMQTT = (value: any, dataType: string): string => {
		if (dataType === "Boolean" || dataType === "Binary") {
			return value ? "1" : "0";
		}
		if (dataType === "String") {
			return value; // Return as-is for HIGH/LOW strings
		}
		return value.toString();
	};

	return (
		<Container className={styles.container}>
			<h3 className={styles.heading}>MQTT Topics Examples</h3>

			<Card className="mb-4">
				<Card.Header>
					<h5 className="mb-0">üìä Sensor Data Topics</h5>
				</Card.Header>
				<Card.Body>
					<p className="text-muted">
						C√°c topic ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ c·∫£m bi·∫øn. Backend s·∫Ω subscribe v√†o c√°c topic n√†y ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu v√† chuy·ªÉn ti·∫øp qua WebSocket ƒë·∫øn frontend.
					</p>

					<Row>
						{sensorTopics.map((topic, index) => (
							<Col md={6} lg={4} key={index} className="mb-4">
								<Card className="h-100">
									<Card.Header className="d-flex justify-content-between align-items-center">
										<strong>{topic.name}</strong>
										<Badge bg="primary">{topic.dataType}</Badge>
									</Card.Header>
									<Card.Body>
										<div className="mb-3">
											<small className="text-muted d-block">Topic:</small>
											<code
												className="user-select-all cursor-pointer text-break"
												onClick={() => copyToClipboard(topic.topic, topic.topic)}
												title="Click to copy"
											>
												{topic.topic}
											</code>
											{copiedTopic === topic.topic && (
												<small className="text-success d-block mt-1">‚úì Copied!</small>
											)}
										</div>

										<p className="small text-muted mb-3">{topic.description}</p>

										{topic.unit && (
											<div className="mb-3">
												<small className="text-muted">Unit: </small>
												<Badge bg="secondary">{topic.unit}</Badge>
											</div>
										)}

										<h6>Example Values:</h6>
										{topic.examples.map((example, exampleIndex) => (
											<div key={exampleIndex} className="mb-2 p-2 bg-light rounded">
												<div className="d-flex justify-content-between align-items-start">
													<div>
														<small className="text-muted d-block">{example.description}</small>
														<code>{getValueForMQTT(example.value, topic.dataType)}</code>
													</div>
													<Button
														size="sm"
														variant="outline-primary"
														onClick={() => copyToClipboard(getValueForMQTT(example.value, topic.dataType), `${topic.topic}_${exampleIndex}`)}
													>
														{copiedTopic === `${topic.topic}_${exampleIndex}` ? '‚úì' : 'Copy'}
													</Button>
												</div>
											</div>
										))}
									</Card.Body>
								</Card>
							</Col>
						))}
					</Row>
				</Card.Body>
			</Card>

			<Card className="mb-4">
				<Card.Header>
					<h5 className="mb-0">üéÆ Device Control Topics</h5>
				</Card.Header>
				<Card.Body>
					<p className="text-muted">
						C√°c topic ƒë·ªÉ ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã. Frontend g·ª≠i l·ªánh qua WebSocket ƒë·∫øn backend, backend s·∫Ω publish l·ªánh n√†y v√†o MQTT broker.
					</p>

					<Row>
						{controlTopics.map((topic, index) => (
							<Col md={6} lg={4} key={index} className="mb-4">
								<Card className="h-100">
									<Card.Header className="d-flex justify-content-between align-items-center">
										<strong>{topic.name}</strong>
										<Badge bg="success">{topic.dataType}</Badge>
									</Card.Header>
									<Card.Body>
										<div className="mb-3">
											<small className="text-muted d-block">Topic:</small>
											<code
												className="user-select-all cursor-pointer text-break"
												onClick={() => copyToClipboard(topic.topic, topic.topic)}
												title="Click to copy"
											>
												{topic.topic}
											</code>
											{copiedTopic === topic.topic && (
												<small className="text-success d-block mt-1">‚úì Copied!</small>
											)}
										</div>

										<p className="small text-muted mb-3">{topic.description}</p>

										<h6>Command Examples:</h6>
										{topic.examples.map((example, exampleIndex) => (
											<div key={exampleIndex} className="mb-3 p-2 bg-light rounded">
												<div className="d-flex justify-content-between align-items-start mb-2">
													<small className="text-muted">{example.description}</small>
													<Button
														size="sm"
														variant="outline-primary"
														onClick={() => copyToClipboard(getValueForMQTT(example.value, topic.dataType), `${topic.topic}_${exampleIndex}`)}
													>
														{copiedTopic === `${topic.topic}_${exampleIndex}` ? '‚úì' : 'Copy'}
													</Button>
												</div>
												<code className="d-block">
													{getValueForMQTT(example.value, topic.dataType)}
												</code>
											</div>
										))}
									</Card.Body>
								</Card>
							</Col>
						))}
					</Row>
				</Card.Body>
			</Card>

			<Card className="mb-4">
				<Card.Header>
					<h5 className="mb-0">üîß Test Commands</h5>
				</Card.Header>
				<Card.Body>
					<p className="text-muted">
						S·ª≠ d·ª•ng c√°c l·ªánh sau ƒë·ªÉ test MQTT v·ªõi broker. <strong>IoT devices ch·ªâ g·ª≠i gi√° tr·ªã ƒë∆°n gi·∫£n, kh√¥ng g·ª≠i JSON.</strong>
					</p>

					<h6>Test Sensor Data (Publish) - Simple Values Only:</h6>
					<div className="mb-3">
						<p className="small text-info">üí° ESP32 g·ª≠i ch·ªâ gi√° tr·ªã s·ªë ho·∫∑c binary, kh√¥ng ph·∫£i JSON object</p>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/temperature -m &quot;25.5&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/humidity -m &quot;65&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/soil -m &quot;0&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/water -m &quot;75&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/light -m &quot;15000&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/height -m &quot;35&quot;
						</code>
						<Button
							size="sm"
							variant="outline-secondary"
							className="mt-2"
							onClick={() => copyToClipboard('mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/sensors/temperature -m "25.5"', 'test_pub')}
						>
							{copiedTopic === 'test_pub' ? '‚úì Copied' : 'Copy Temperature Command'}
						</Button>
					</div>

					<h6>Test Device Control (Publish) - ESP32 Format:</h6>
					<div className="mb-3">
						<p className="small text-info">üí° ESP32 ch·ªâ nh·∫≠n &quot;HIGH&quot;/&quot;LOW&quot; strings, kh√¥ng ph·∫£i &quot;1&quot;/&quot;0&quot;</p>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/devices/light/control -m &quot;HIGH&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/devices/pump/control -m &quot;LOW&quot;
						</code>
						<code className="d-block p-2 bg-light mb-2">
							mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/devices/door/control -m &quot;HIGH&quot;
						</code>
						<Button
							size="sm"
							variant="outline-secondary"
							className="mt-2"
							onClick={() => copyToClipboard('mosquitto_pub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/devices/light/control -m "HIGH"', 'test_control')}
						>
							{copiedTopic === 'test_control' ? '‚úì Copied' : 'Copy Light ON Command'}
						</Button>
					</div>

					<h6>Subscribe to All Topics:</h6>
					<div className="mb-3">
						<code className="d-block p-2 bg-light">
							mosquitto_sub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/+/+
						</code>
						<Button
							size="sm"
							variant="outline-secondary"
							className="mt-2"
							onClick={() => copyToClipboard('mosquitto_sub -h mqtt.noboroto.id.vn -p 1883 -u vision -P vision -t greenhouse/+/+', 'test_sub')}
						>
							{copiedTopic === 'test_sub' ? '‚úì Copied' : 'Copy Subscribe Command'}
						</Button>
					</div>
				</Card.Body>
			</Card>
		</Container>
	);
};

export default MqttExamples;
